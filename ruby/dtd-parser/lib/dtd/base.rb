# Autogenerated from a Treetop grammar. Edits may be lost.


module DTD
	module Base
   include Treetop::Runtime

   def root
     @root || :a_name
   end

   module AName0
     def a_letter
       elements[1]
     end

   end

   def _nt_a_name
     start_index = index
     if node_cache[:a_name].has_key?(index)
       cached = node_cache[:a_name][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     i1 = index
     r2 = _nt_xml
     if r2
       r1 = nil
     else
       @index = i1
       r1 = instantiate_node(SyntaxNode,input, index...index)
     end
     s0 << r1
     if r1
       r3 = _nt_a_letter
       s0 << r3
       if r3
         s4, i4 = [], index
         loop do
           i5 = index
           r6 = _nt_a_number
           if r6
             r5 = r6
           else
             r7 = _nt_a_punctuation
             if r7
               r5 = r7
             else
               r8 = _nt_a_letter
               if r8
                 r5 = r8
               else
                 @index = i5
                 r5 = nil
               end
             end
           end
           if r5
             s4 << r5
           else
             break
           end
         end
         r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
         s0 << r4
       end
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(AName0)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:a_name][start_index] = r0

     r0
   end

   module Xml0
   end

   def _nt_xml
     start_index = index
     if node_cache[:xml].has_key?(index)
       cached = node_cache[:xml][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     i1 = index
     if has_terminal?('x', false, index)
       r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure('x')
       r2 = nil
     end
     if r2
       r1 = r2
     else
       if has_terminal?('X', false, index)
         r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
         @index += 1
       else
         terminal_parse_failure('X')
         r3 = nil
       end
       if r3
         r1 = r3
       else
         @index = i1
         r1 = nil
       end
     end
     s0 << r1
     if r1
       i4 = index
       if has_terminal?('m', false, index)
         r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
         @index += 1
       else
         terminal_parse_failure('m')
         r5 = nil
       end
       if r5
         r4 = r5
       else
         if has_terminal?('M', false, index)
           r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('M')
           r6 = nil
         end
         if r6
           r4 = r6
         else
           @index = i4
           r4 = nil
         end
       end
       s0 << r4
       if r4
         i7 = index
         if has_terminal?('l', false, index)
           r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure('l')
           r8 = nil
         end
         if r8
           r7 = r8
         else
           if has_terminal?('L', false, index)
             r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
             @index += 1
           else
             terminal_parse_failure('L')
             r9 = nil
           end
           if r9
             r7 = r9
           else
             @index = i7
             r7 = nil
           end
         end
         s0 << r7
       end
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(Xml0)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:xml][start_index] = r0

     r0
   end

   def _nt_a_number
     start_index = index
     if node_cache[:a_number].has_key?(index)
       cached = node_cache[:a_number][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?('\G[0-9]', true, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       r0 = nil
     end

     node_cache[:a_number][start_index] = r0

     r0
   end

   def _nt_a_punctuation
     start_index = index
     if node_cache[:a_punctuation].has_key?(index)
       cached = node_cache[:a_punctuation][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?('\G[!.\\-:]', true, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       r0 = nil
     end

     node_cache[:a_punctuation][start_index] = r0

     r0
   end

   def _nt_space
     start_index = index
     if node_cache[:space].has_key?(index)
       cached = node_cache[:space][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?(' ', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure(' ')
       r0 = nil
     end

     node_cache[:space][start_index] = r0

     r0
   end

   def _nt_a_letter
     start_index = index
     if node_cache[:a_letter].has_key?(index)
       cached = node_cache[:a_letter][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?('\G[_a-zA-Z]', true, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       r0 = nil
     end

     node_cache[:a_letter][start_index] = r0

     r0
   end

 end

 class BaseParser < Treetop::Runtime::CompiledParser
   include Base
 end

end
