# Autogenerated from a Treetop grammar. Edits may be lost.


module DTD
	module Attribute
   include Treetop::Runtime

   def root
     @root || :attribute_list_declaration
   end

   include Base

   module AttributeListDeclaration0
     def space1
       elements[1]
     end

     def a_name
       elements[2]
     end

     def space2
       elements[3]
     end

   end

   def _nt_attribute_list_declaration
     start_index = index
     if node_cache[:attribute_list_declaration].has_key?(index)
       cached = node_cache[:attribute_list_declaration][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     if has_terminal?('<!ATTLIST', false, index)
       r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
       @index += 9
     else
       terminal_parse_failure('<!ATTLIST')
       r1 = nil
     end
     s0 << r1
     if r1
       r2 = _nt_space
       s0 << r2
       if r2
         r3 = _nt_a_name
         s0 << r3
         if r3
           r4 = _nt_space
           s0 << r4
           if r4
             if has_terminal?('id ID #REQUIRED', false, index)
               r5 = instantiate_node(SyntaxNode,input, index...(index + 15))
               @index += 15
             else
               terminal_parse_failure('id ID #REQUIRED')
               r5 = nil
             end
             s0 << r5
             if r5
               r7 = _nt_space
               if r7
                 r6 = r7
               else
                 r6 = instantiate_node(SyntaxNode,input, index...index)
               end
               s0 << r6
               if r6
                 if has_terminal?('>', false, index)
                   r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                   @index += 1
                 else
                   terminal_parse_failure('>')
                   r8 = nil
                 end
                 s0 << r8
               end
             end
           end
         end
       end
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(AttributeListDeclaration0)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:attribute_list_declaration][start_index] = r0

     r0
   end

   def _nt_attribute_type
     start_index = index
     if node_cache[:attribute_type].has_key?(index)
       cached = node_cache[:attribute_type][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0 = index
     if has_terminal?('CDATA', false, index)
       r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
       @index += 5
     else
       terminal_parse_failure('CDATA')
       r1 = nil
     end
     if r1
       r0 = r1
     else
       if has_terminal?('ID', false, index)
         r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
         @index += 2
       else
         terminal_parse_failure('ID')
         r2 = nil
       end
       if r2
         r0 = r2
       else
         if has_terminal?('IDREF', false, index)
           r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
           @index += 5
         else
           terminal_parse_failure('IDREF')
           r3 = nil
         end
         if r3
           r0 = r3
         else
           if has_terminal?('IDREFS', false, index)
             r4 = instantiate_node(SyntaxNode,input, index...(index + 6))
             @index += 6
           else
             terminal_parse_failure('IDREFS')
             r4 = nil
           end
           if r4
             r0 = r4
           else
             if has_terminal?('NMTOKEN', false, index)
               r5 = instantiate_node(SyntaxNode,input, index...(index + 7))
               @index += 7
             else
               terminal_parse_failure('NMTOKEN')
               r5 = nil
             end
             if r5
               r0 = r5
             else
               if has_terminal?('NMTOKENS', false, index)
                 r6 = instantiate_node(SyntaxNode,input, index...(index + 8))
                 @index += 8
               else
                 terminal_parse_failure('NMTOKENS')
                 r6 = nil
               end
               if r6
                 r0 = r6
               else
                 if has_terminal?('ENTITY', false, index)
                   r7 = instantiate_node(SyntaxNode,input, index...(index + 6))
                   @index += 6
                 else
                   terminal_parse_failure('ENTITY')
                   r7 = nil
                 end
                 if r7
                   r0 = r7
                 else
                   if has_terminal?('ENTITIES', false, index)
                     r8 = instantiate_node(SyntaxNode,input, index...(index + 8))
                     @index += 8
                   else
                     terminal_parse_failure('ENTITIES')
                     r8 = nil
                   end
                   if r8
                     r0 = r8
                   else
                     @index = i0
                     r0 = nil
                   end
                 end
               end
             end
           end
         end
       end
     end

     node_cache[:attribute_type][start_index] = r0

     r0
   end

   module AttributeOptions0
     def default
       elements[2]
     end

   end

   module AttributeOptions1
   end

   module AttributeOptions2
     def default
       elements[1]
     end

   end

   def _nt_attribute_options
     start_index = index
     if node_cache[:attribute_options].has_key?(index)
       cached = node_cache[:attribute_options][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0 = index
     i1, s1 = index, []
     if has_terminal?('#', false, index)
       r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure('#')
       r2 = nil
     end
     s1 << r2
     if r2
       i3 = index
       if has_terminal?('IMPLIED', false, index)
         r4 = instantiate_node(SyntaxNode,input, index...(index + 7))
         @index += 7
       else
         terminal_parse_failure('IMPLIED')
         r4 = nil
       end
       if r4
         r3 = r4
       else
         if has_terminal?('REQUIRED', false, index)
           r5 = instantiate_node(SyntaxNode,input, index...(index + 8))
           @index += 8
         else
           terminal_parse_failure('REQUIRED')
           r5 = nil
         end
         if r5
           r3 = r5
         else
           i6, s6 = index, []
           if has_terminal?('FIXED', false, index)
             r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
             @index += 5
           else
             terminal_parse_failure('FIXED')
             r7 = nil
           end
           s6 << r7
           if r7
             if has_terminal?('"', false, index)
               r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure('"')
               r8 = nil
             end
             s6 << r8
             if r8
               r9 = _nt_default
               s6 << r9
               if r9
                 if has_terminal?('"', false, index)
                   r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                   @index += 1
                 else
                   terminal_parse_failure('"')
                   r10 = nil
                 end
                 s6 << r10
               end
             end
           end
           if s6.last
             r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
             r6.extend(AttributeOptions0)
           else
             @index = i6
             r6 = nil
           end
           if r6
             r3 = r6
           else
             @index = i3
             r3 = nil
           end
         end
       end
       s1 << r3
     end
     if s1.last
       r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
       r1.extend(AttributeOptions1)
     else
       @index = i1
       r1 = nil
     end
     if r1
       r0 = r1
     else
       i11, s11 = index, []
       if has_terminal?('"', false, index)
         r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
         @index += 1
       else
         terminal_parse_failure('"')
         r12 = nil
       end
       s11 << r12
       if r12
         r13 = _nt_default
         s11 << r13
         if r13
           if has_terminal?('"', false, index)
             r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
             @index += 1
           else
             terminal_parse_failure('"')
             r14 = nil
           end
           s11 << r14
         end
       end
       if s11.last
         r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
         r11.extend(AttributeOptions2)
       else
         @index = i11
         r11 = nil
       end
       if r11
         r0 = r11
       else
         @index = i0
         r0 = nil
       end
     end

     node_cache[:attribute_options][start_index] = r0

     r0
   end

   def _nt_default
     start_index = index
     if node_cache[:default].has_key?(index)
       cached = node_cache[:default][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     s0, i0 = [], index
     loop do
       if index < input_length
         r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
         @index += 1
       else
         terminal_parse_failure("any character")
         r1 = nil
       end
       if r1
         s0 << r1
       else
         break
       end
     end
     if s0.empty?
       @index = i0
       r0 = nil
     else
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
     end

     node_cache[:default][start_index] = r0

     r0
   end

 end

 class AttributeParser < Treetop::Runtime::CompiledParser
   include Attribute
 end

end
