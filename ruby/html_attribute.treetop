grammar HTMLAttribute
  rule attributes
    attribute space_n_attributes:( space attribute )* {
      def attributes
        [attribute] + space_n_attributes.elements.collect{|space_n_attribute| space_n_attribute.attribute }

#        result = AttributeNodeMap.new attribute.attribute_name, attribute.attribute_value
#        space_n_attributes.elements.collect do |space_n_attribute|
#          result << [space_n_attribute.attribute.attribute_name, space_n_attribute.attribute.attribute_value]
#        end

#        class << result
#          def to_a
#            self
#          end
#
#          def to_hash
#            result = {
#              self.attribute_name => self.attribute_value
#            }
#            space_n_attributes.elements.each{|space_n_attribute| 
#              result.update space_n_attribute.attribute_name => space_n_attribute.attribute_value
#            }
#          end
#        end
#
#        result = {
#          attribute.attribute_name => attribute.attribute_value
#        }
#        space_n_attributes.elements.each{|space_n_attribute| 
##          attribute = space_n_attribute.attribute
#          result.update space_n_attribute.attribute_name => space_n_attribute.attribute_value
#        }
#        result
      end
    }
  end

  rule attribute
    attribute_name equals attribute_value
  end

  rule attribute_name
    [_a-zA-Z] [_a-zA-Z0-9]* {
      def to_s
        text_value
      end
    }
  end

  rule attribute_value
    ( double_quote val:( !double_quote any )* double_quote
    / single_quote val:( !single_quote any )* single_quote ) {
      def to_s
        val.text_value
      end
    }
  end

  rule equals
    '='
  end

  rule double_quote
    '"'
  end

  rule single_quote
    "'"
  end

  rule any
    .
  end

  rule space
    "\n" / "\t" / "\s"
  end
end
