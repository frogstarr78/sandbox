# Autogenerated from a Treetop grammar. Edits may be lost.


module Pratt
	module Dsl
   include Treetop::Runtime

   def root
     @root ||= :sentence
   end

   module Sentence0
     def conjunction
       elements[0]
     end

     def fragment
       elements[1]
     end
   end

   module Sentence1
     def fragment
       elements[0]
     end

     def more_fragments
       elements[1]
     end

     def period
       elements[2]
     end
   end

   module Sentence2
     def fragments
       [fragment] + more_fragments.elements.map {|frag| frag.fragment }
     end
   end

   def _nt_sentence
     start_index = index
     if node_cache[:sentence].has_key?(index)
       cached = node_cache[:sentence][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     r1 = _nt_fragment
     s0 << r1
     if r1
       s2, i2 = [], index
       loop do
         i3, s3 = index, []
         r4 = _nt_conjunction
         s3 << r4
         if r4
           r5 = _nt_fragment
           s3 << r5
         end
         if s3.last
           r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
           r3.extend(Sentence0)
         else
           @index = i3
           r3 = nil
         end
         if r3
           s2 << r3
         else
           break
         end
       end
       r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       s0 << r2
       if r2
         r6 = _nt_period
         s0 << r6
       end
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(Sentence1)
       r0.extend(Sentence2)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:sentence][start_index] = r0

     r0
   end

   module Fragment0
   end

   module Fragment1
     def verb
       elements[0]
     end

     def space1
       elements[1]
     end

     def noun
       elements[2]
     end

     def space2
       elements[3]
     end

   end

   module Fragment2
   end

   module Fragment3
     def to_s
       text_value
     end
   end

   def _nt_fragment
     start_index = index
     if node_cache[:fragment].has_key?(index)
       cached = node_cache[:fragment][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0 = index
     i1, s1 = index, []
     r2 = _nt_verb
     s1 << r2
     if r2
       r3 = _nt_space
       s1 << r3
       if r3
         r4 = _nt_noun
         s1 << r4
         if r4
           r5 = _nt_space
           s1 << r5
           if r5
             s6, i6 = [], index
             loop do
               i7, s7 = index, []
               i8 = index
               r9 = _nt_conjunction
               if r9
                 r8 = nil
               else
                 @index = i8
                 r8 = instantiate_node(SyntaxNode,input, index...index)
               end
               s7 << r8
               if r8
                 i10 = index
                 r11 = _nt_period
                 if r11
                   r10 = nil
                 else
                   @index = i10
                   r10 = instantiate_node(SyntaxNode,input, index...index)
                 end
                 s7 << r10
                 if r10
                   if index < input_length
                     r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                     @index += 1
                   else
                     terminal_parse_failure("any character")
                     r12 = nil
                   end
                   s7 << r12
                 end
               end
               if s7.last
                 r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                 r7.extend(Fragment0)
               else
                 @index = i7
                 r7 = nil
               end
               if r7
                 s6 << r7
               else
                 break
               end
             end
             if s6.empty?
               @index = i6
               r6 = nil
             else
               r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
             end
             s1 << r6
           end
         end
       end
     end
     if s1.last
       r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
       r1.extend(Fragment1)
     else
       @index = i1
       r1 = nil
     end
     if r1
       r0 = r1
       r0.extend(Fragment3)
     else
       s13, i13 = [], index
       loop do
         i14, s14 = index, []
         i15 = index
         r16 = _nt_period
         if r16
           r15 = nil
         else
           @index = i15
           r15 = instantiate_node(SyntaxNode,input, index...index)
         end
         s14 << r15
         if r15
           i17 = index
           r18 = _nt_conjunction
           if r18
             r17 = nil
           else
             @index = i17
             r17 = instantiate_node(SyntaxNode,input, index...index)
           end
           s14 << r17
           if r17
             if index < input_length
               r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure("any character")
               r19 = nil
             end
             s14 << r19
           end
         end
         if s14.last
           r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
           r14.extend(Fragment2)
         else
           @index = i14
           r14 = nil
         end
         if r14
           s13 << r14
         else
           break
         end
       end
       if s13.empty?
         @index = i13
         r13 = nil
       else
         r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
       end
       if r13
         r0 = r13
         r0.extend(Fragment3)
       else
         @index = i0
         r0 = nil
       end
     end

     node_cache[:fragment][start_index] = r0

     r0
   end

   def _nt_verb
     start_index = index
     if node_cache[:verb].has_key?(index)
       cached = node_cache[:verb][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0 = index
     if has_terminal?('begin', false, index)
       r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
       @index += 5
     else
       terminal_parse_failure('begin')
       r1 = nil
     end
     if r1
       r0 = r1
       r0.extend(OrmMethods)
     else
       if has_terminal?('Begin', false, index)
         r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
         @index += 5
       else
         terminal_parse_failure('Begin')
         r2 = nil
       end
       if r2
         r0 = r2
         r0.extend(OrmMethods)
       else
         if has_terminal?('start', false, index)
           r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
           @index += 5
         else
           terminal_parse_failure('start')
           r3 = nil
         end
         if r3
           r0 = r3
           r0.extend(OrmMethods)
         else
           if has_terminal?('Start', false, index)
             r4 = instantiate_node(SyntaxNode,input, index...(index + 5))
             @index += 5
           else
             terminal_parse_failure('Start')
             r4 = nil
           end
           if r4
             r0 = r4
             r0.extend(OrmMethods)
           else
             if has_terminal?('restart', false, index)
               r5 = instantiate_node(SyntaxNode,input, index...(index + 7))
               @index += 7
             else
               terminal_parse_failure('restart')
               r5 = nil
             end
             if r5
               r0 = r5
               r0.extend(OrmMethods)
             else
               if has_terminal?('Restart', false, index)
                 r6 = instantiate_node(SyntaxNode,input, index...(index + 7))
                 @index += 7
               else
                 terminal_parse_failure('Restart')
                 r6 = nil
               end
               if r6
                 r0 = r6
                 r0.extend(OrmMethods)
               else
                 if has_terminal?('cease', false, index)
                   r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
                   @index += 5
                 else
                   terminal_parse_failure('cease')
                   r7 = nil
                 end
                 if r7
                   r0 = r7
                   r0.extend(OrmMethods)
                 else
                   if has_terminal?('Cease', false, index)
                     r8 = instantiate_node(SyntaxNode,input, index...(index + 5))
                     @index += 5
                   else
                     terminal_parse_failure('Cease')
                     r8 = nil
                   end
                   if r8
                     r0 = r8
                     r0.extend(OrmMethods)
                   else
                     if has_terminal?('end', false, index)
                       r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
                       @index += 3
                     else
                       terminal_parse_failure('end')
                       r9 = nil
                     end
                     if r9
                       r0 = r9
                       r0.extend(OrmMethods)
                     else
                       if has_terminal?('End', false, index)
                         r10 = instantiate_node(SyntaxNode,input, index...(index + 3))
                         @index += 3
                       else
                         terminal_parse_failure('End')
                         r10 = nil
                       end
                       if r10
                         r0 = r10
                         r0.extend(OrmMethods)
                       else
                         @index = i0
                         r0 = nil
                       end
                     end
                   end
                 end
               end
             end
           end
         end
       end
     end

     node_cache[:verb][start_index] = r0

     r0
   end

   module Noun0
   end

   def _nt_noun
     start_index = index
     if node_cache[:noun].has_key?(index)
       cached = node_cache[:noun][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     s0, i0 = [], index
     loop do
       i1, s1 = index, []
       i2 = index
       r3 = _nt_space
       if r3
         r2 = nil
       else
         @index = i2
         r2 = instantiate_node(SyntaxNode,input, index...index)
       end
       s1 << r2
       if r2
         if index < input_length
           r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure("any character")
           r4 = nil
         end
         s1 << r4
       end
       if s1.last
         r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
         r1.extend(Noun0)
       else
         @index = i1
         r1 = nil
       end
       if r1
         s0 << r1
       else
         break
       end
     end
     if s0.empty?
       @index = i0
       r0 = nil
     else
       r0 = instantiate_node(OrmModel,input, i0...index, s0)
     end

     node_cache[:noun][start_index] = r0

     r0
   end

   module TemporalLiteral0
     def preposition
       elements[0]
     end

     def space
       elements[1]
     end

   end

   def _nt_temporal_literal
     start_index = index
     if node_cache[:temporal_literal].has_key?(index)
       cached = node_cache[:temporal_literal][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     r1 = _nt_preposition
     s0 << r1
     if r1
       r2 = _nt_space
       s0 << r2
       if r2
         s3, i3 = [], index
         loop do
           if index < input_length
             r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
             @index += 1
           else
             terminal_parse_failure("any character")
             r4 = nil
           end
           if r4
             s3 << r4
           else
             break
           end
         end
         if s3.empty?
           @index = i3
           r3 = nil
         else
           r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
         end
         s0 << r3
       end
     end
     if s0.last
       r0 = instantiate_node(TemporalValue,input, i0...index, s0)
       r0.extend(TemporalLiteral0)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:temporal_literal][start_index] = r0

     r0
   end

   module MorningREvening0
   end

   def _nt_morning_r_evening
     start_index = index
     if node_cache[:morning_r_evening].has_key?(index)
       cached = node_cache[:morning_r_evening][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     i1 = index
     if has_terminal?('\G[aA]', true, index)
       r2 = true
       @index += 1
     else
       r2 = nil
     end
     if r2
       r1 = r2
     else
       if has_terminal?('\G[pP]', true, index)
         r3 = true
         @index += 1
       else
         r3 = nil
       end
       if r3
         r1 = r3
       else
         @index = i1
         r1 = nil
       end
     end
     s0 << r1
     if r1
       if has_terminal?('\G[mM]', true, index)
         r4 = true
         @index += 1
       else
         r4 = nil
       end
       s0 << r4
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(MorningREvening0)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:morning_r_evening][start_index] = r0

     r0
   end

   def _nt_preposition
     start_index = index
     if node_cache[:preposition].has_key?(index)
       cached = node_cache[:preposition][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0 = index
     if has_terminal?('on', false, index)
       r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
       @index += 2
     else
       terminal_parse_failure('on')
       r1 = nil
     end
     if r1
       r0 = r1
     else
       if has_terminal?('at', false, index)
         r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
         @index += 2
       else
         terminal_parse_failure('at')
         r2 = nil
       end
       if r2
         r0 = r2
       else
         @index = i0
         r0 = nil
       end
     end

     node_cache[:preposition][start_index] = r0

     r0
   end

   module Conjunction0
     def space
       elements[1]
     end

   end

   module Conjunction1
     def space
       elements[1]
     end
   end

   def _nt_conjunction
     start_index = index
     if node_cache[:conjunction].has_key?(index)
       cached = node_cache[:conjunction][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     i1 = index
     i2, s2 = index, []
     r4 = _nt_comma
     if r4
       r3 = r4
     else
       r3 = instantiate_node(SyntaxNode,input, index...index)
     end
     s2 << r3
     if r3
       r5 = _nt_space
       s2 << r5
       if r5
         if has_terminal?('and', false, index)
           r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
           @index += 3
         else
           terminal_parse_failure('and')
           r6 = nil
         end
         s2 << r6
       end
     end
     if s2.last
       r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       r2.extend(Conjunction0)
     else
       @index = i2
       r2 = nil
     end
     if r2
       r1 = r2
     else
       r7 = _nt_comma
       if r7
         r1 = r7
       else
         @index = i1
         r1 = nil
       end
     end
     s0 << r1
     if r1
       r8 = _nt_space
       s0 << r8
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(Conjunction1)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:conjunction][start_index] = r0

     r0
   end

   def _nt_space
     start_index = index
     if node_cache[:space].has_key?(index)
       cached = node_cache[:space][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?(' ', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure(' ')
       r0 = nil
     end

     node_cache[:space][start_index] = r0

     r0
   end

   def _nt_comma
     start_index = index
     if node_cache[:comma].has_key?(index)
       cached = node_cache[:comma][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?(',', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure(',')
       r0 = nil
     end

     node_cache[:comma][start_index] = r0

     r0
   end

   def _nt_period
     start_index = index
     if node_cache[:period].has_key?(index)
       cached = node_cache[:period][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?('.', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure('.')
       r0 = nil
     end

     node_cache[:period][start_index] = r0

     r0
   end

 end

 class DslParser < Treetop::Runtime::CompiledParser
   include Dsl
 end

end
