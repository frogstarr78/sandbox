#  Column = OStruct.new
#  Column.text = ''
#  Column.alias = '?column?'
#  Column.alias? = false

#  Table = OStruct.new
#  Table.name

#  SelectStatement = OStruct.new
#  SelectStatement.columns = Column.new.to_a
#  SelectStatement.table = 


grammar Sql
  rule select_stmt
    ws* "SELECT" ws columns ws "FROM" ws table_def !ws
  end

  rule table_def
    .+
  end

  rule columns
    '*' / literal+ (space? ',' space? literal)+ / literal
  end

  rule literal
    (  constant / function_call / ( name_literal+ '.' )? name_literal+ ) (space? operator space? literal)* alias? 
  end

  rule name_literal
    [_a-zA-Z0-9]+
  end

  rule alias
    space ('AS' / 'as') space ( quote_literal ( !quote_literal [ _a-zA-Z0-9] )+ quote_literal / [_a-zA-Z0-9]+ ) 
  end

  rule quote_literal
    '"'
  end

  rule constant
    string_constant / bit_constant / numeric_constant {
      def name
        '?column?'
      end
    }
  end

  rule string_constant
    quote_val [\ ,"_a-zA-Z0-9]+ quote_val
  end

  rule quote_val
    "'" / '$' ( !'$' . )* '$' 
  end

  rule bit_constant
    'B' "'" [01]+ "'"
  end

  rule numeric_constant
    digits
    /
    digits '.' digits? ( 'e' [-+] digits )?
    /
    digits? '.' digits ( 'e' [-+] digits )?
    /
    digits 'e' [-+] digits
  end

  rule concat_op
    '||'
  end

  rule operator
    '||' / [-+*<>/=~!@#%^&|`?]
  end

  rule alpha
    [a-zA-Z]+
  end

  rule digits
    [0-9]+
  end

  rule function_call
    alpha '(' ( !')' . )* ')'
  end

  rule ws
    ( space / tab / newline )+
  end

  rule space
    ' '
  end

  rule newline
    "\n"
  end

  rule tab
    "\t"
  end

  rule semic
    ';'
  end
end
