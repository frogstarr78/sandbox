# Autogenerated from a Treetop grammar. Edits may be lost.


module Named
  include Treetop::Runtime

  def root
    @root ||= :config
  end

  module Config0
    def zone_records
      elements[2]
    end
  end

  def _nt_config
    start_index = index
    if node_cache[:config].has_key?(index)
      cached = node_cache[:config][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_options_config
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_logging_config
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        s5, i5 = [], index
        loop do
          r6 = _nt_zone_record
          if r6
            s5 << r6
          else
            break
          end
        end
        if s5.empty?
          @index = i5
          r5 = nil
        else
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        end
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(NamedConf,input, i0...index, s0)
      r0.extend(Config0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:config][start_index] = r0

    r0
  end

  module ZoneRecord0
    def quoted_name
      elements[3]
    end

    def open_curly
      elements[7]
    end

    def record_options
      elements[9]
    end

    def close_curly
      elements[10]
    end

    def semi
      elements[11]
    end

  end

  def _nt_zone_record
    start_index = index
    if node_cache[:zone_record].has_key?(index)
      cached = node_cache[:zone_record][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if has_terminal?("zone", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("zone")
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          r6 = _nt_quoted_name
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_space
              if r8
                s7 << r8
              else
                break
              end
            end
            if s7.empty?
              @index = i7
              r7 = nil
            else
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            end
            s0 << r7
            if r7
              if has_terminal?("in", false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("in")
                r9 = nil
              end
              s0 << r9
              if r9
                s10, i10 = [], index
                loop do
                  r11 = _nt_space
                  if r11
                    s10 << r11
                  else
                    break
                  end
                end
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                s0 << r10
                if r10
                  r12 = _nt_open_curly
                  s0 << r12
                  if r12
                    s13, i13 = [], index
                    loop do
                      r14 = _nt_space
                      if r14
                        s13 << r14
                      else
                        break
                      end
                    end
                    if s13.empty?
                      @index = i13
                      r13 = nil
                    else
                      r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                    end
                    s0 << r13
                    if r13
                      r15 = _nt_record_options
                      s0 << r15
                      if r15
                        r16 = _nt_close_curly
                        s0 << r16
                        if r16
                          r17 = _nt_semi
                          s0 << r17
                          if r17
                            s18, i18 = [], index
                            loop do
                              r19 = _nt_space
                              if r19
                                s18 << r19
                              else
                                break
                              end
                            end
                            r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                            s0 << r18
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Record,input, i0...index, s0)
      r0.extend(ZoneRecord0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:zone_record][start_index] = r0

    r0
  end

  module RecordOptions0
    def type_def
      elements[0]
    end

    def file_def
      elements[1]
    end

  end

  def _nt_record_options
    start_index = index
    if node_cache[:record_options].has_key?(index)
      cached = node_cache[:record_options][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type_def
    s0 << r1
    if r1
      r2 = _nt_file_def
      s0 << r2
      if r2
        r4 = _nt_master_def
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r6 = _nt_transfer_source_def
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RecordOptions0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:record_options][start_index] = r0

    r0
  end

  module TypeDef0
    def type
      elements[2]
    end

    def semi
      elements[4]
    end

  end

  def _nt_type_def
    start_index = index
    if node_cache[:type_def].has_key?(index)
      cached = node_cache[:type_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("type", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("type")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        i4 = index
        if has_terminal?("slave", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure("slave")
          r5 = nil
        end
        if r5
          r4 = r5
        else
          if has_terminal?("master", false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure("master")
            r6 = nil
          end
          if r6
            r4 = r6
          else
            if has_terminal?("forward", false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 7))
              @index += 7
            else
              terminal_parse_failure("forward")
              r7 = nil
            end
            if r7
              r4 = r7
            else
              if has_terminal?("hint", false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure("hint")
                r8 = nil
              end
              if r8
                r4 = r8
              else
                if has_terminal?("stub", false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 4))
                  @index += 4
                else
                  terminal_parse_failure("stub")
                  r9 = nil
                end
                if r9
                  r4 = r9
                else
                  if has_terminal?("delegation-only", false, index)
                    r10 = instantiate_node(SyntaxNode,input, index...(index + 15))
                    @index += 15
                  else
                    terminal_parse_failure("delegation-only")
                    r10 = nil
                  end
                  if r10
                    r4 = r10
                  else
                    @index = i4
                    r4 = nil
                  end
                end
              end
            end
          end
        end
        s0 << r4
        if r4
          s11, i11 = [], index
          loop do
            r12 = _nt_space
            if r12
              s11 << r12
            else
              break
            end
          end
          r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
          s0 << r11
          if r11
            r13 = _nt_semi
            s0 << r13
            if r13
              s14, i14 = [], index
              loop do
                r15 = _nt_space
                if r15
                  s14 << r15
                else
                  break
                end
              end
              if s14.empty?
                @index = i14
                r14 = nil
              else
                r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
              end
              s0 << r14
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TypeDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_def][start_index] = r0

    r0
  end

  module FileDef0
    def file_path
      elements[2]
    end

    def semi
      elements[4]
    end

  end

  def _nt_file_def
    start_index = index
    if node_cache[:file_def].has_key?(index)
      cached = node_cache[:file_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("file", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("file")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_quoted_name
        s0 << r4
        if r4
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_semi
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              if s8.empty?
                @index = i8
                r8 = nil
              else
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FileDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:file_def][start_index] = r0

    r0
  end

  module MasterDef0
    def open_curly
      elements[2]
    end

    def raw_ipv4
      elements[4]
    end

    def semi1
      elements[6]
    end

    def close_curly
      elements[8]
    end

    def semi2
      elements[10]
    end

  end

  def _nt_master_def
    start_index = index
    if node_cache[:master_def].has_key?(index)
      cached = node_cache[:master_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("masters", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure("masters")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_open_curly
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_raw_ipv4
            s0 << r7
            if r7
              r9 = _nt_space
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                r10 = _nt_semi
                s0 << r10
                if r10
                  s11, i11 = [], index
                  loop do
                    r12 = _nt_space
                    if r12
                      s11 << r12
                    else
                      break
                    end
                  end
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  s0 << r11
                  if r11
                    r13 = _nt_close_curly
                    s0 << r13
                    if r13
                      r15 = _nt_space
                      if r15
                        r14 = r15
                      else
                        r14 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r14
                      if r14
                        r16 = _nt_semi
                        s0 << r16
                        if r16
                          s17, i17 = [], index
                          loop do
                            r18 = _nt_space
                            if r18
                              s17 << r18
                            else
                              break
                            end
                          end
                          if s17.empty?
                            @index = i17
                            r17 = nil
                          else
                            r17 = instantiate_node(SyntaxNode,input, i17...index, s17)
                          end
                          s0 << r17
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MasterDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:master_def][start_index] = r0

    r0
  end

  module TransferSourceDef0
    def raw_ipv4
      elements[2]
    end

    def semi
      elements[4]
    end

  end

  def _nt_transfer_source_def
    start_index = index
    if node_cache[:transfer_source_def].has_key?(index)
      cached = node_cache[:transfer_source_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("transfer-source", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 15))
      @index += 15
    else
      terminal_parse_failure("transfer-source")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_raw_ipv4
        s0 << r4
        if r4
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_semi
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              if s8.empty?
                @index = i8
                r8 = nil
              else
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TransferSourceDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:transfer_source_def][start_index] = r0

    r0
  end

  module OptionsConfig0
    def open_curly
      elements[3]
    end

    def options_options
      elements[5]
    end

    def close_curly
      elements[6]
    end

    def semi
      elements[7]
    end

  end

  def _nt_options_config
    start_index = index
    if node_cache[:options_config].has_key?(index)
      cached = node_cache[:options_config][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if has_terminal?("options", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 7))
        @index += 7
      else
        terminal_parse_failure("options")
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          r6 = _nt_open_curly
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_space
              if r8
                s7 << r8
              else
                break
              end
            end
            if s7.empty?
              @index = i7
              r7 = nil
            else
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            end
            s0 << r7
            if r7
              r9 = _nt_options_options
              s0 << r9
              if r9
                r10 = _nt_close_curly
                s0 << r10
                if r10
                  r11 = _nt_semi
                  s0 << r11
                  if r11
                    s12, i12 = [], index
                    loop do
                      r13 = _nt_space
                      if r13
                        s12 << r13
                      else
                        break
                      end
                    end
                    r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                    s0 << r12
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(OptionsConfig0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:options_config][start_index] = r0

    r0
  end

  module OptionsOptions0
    def directory_path
      elements[0]
    end

    def dump_file
      elements[1]
    end

    def statistics_file
      elements[2]
    end

    def allow_query
      elements[3]
    end

    def allow_query_cache
      elements[4]
    end

    def transfer_source
      elements[5]
    end

    def allow_recursion
      elements[6]
    end

    def notify_def
      elements[8]
    end
  end

  def _nt_options_options
    start_index = index
    if node_cache[:options_options].has_key?(index)
      cached = node_cache[:options_options][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_file_config_def
    s0 << r1
    if r1
      r2 = _nt_file_config_def
      s0 << r2
      if r2
        r3 = _nt_file_config_def
        s0 << r3
        if r3
          r4 = _nt_net_allow_def
          s0 << r4
          if r4
            r5 = _nt_net_allow_def
            s0 << r5
            if r5
              r6 = _nt_host_allow_def
              s0 << r6
              if r6
                r7 = _nt_net_allow_def
                s0 << r7
                if r7
                  r9 = _nt_query_source_def
                  if r9
                    r8 = r9
                  else
                    r8 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r8
                  if r8
                    r10 = _nt_boolean_def
                    s0 << r10
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(OptionsOptions0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:options_options][start_index] = r0

    r0
  end

  module FileConfigDef0
    def file_path
      elements[2]
    end

    def semi
      elements[4]
    end

  end

  def _nt_file_config_def
    start_index = index
    if node_cache[:file_config_def].has_key?(index)
      cached = node_cache[:file_config_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("directory", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure("directory")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("dump-file", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 9))
        @index += 9
      else
        terminal_parse_failure("dump-file")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        if has_terminal?("statistics-file", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 15))
          @index += 15
        else
          terminal_parse_failure("statistics-file")
          r4 = nil
        end
        if r4
          r1 = r4
        else
          @index = i1
          r1 = nil
        end
      end
    end
    s0 << r1
    if r1
      s5, i5 = [], index
      loop do
        r6 = _nt_space
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s0 << r5
      if r5
        r7 = _nt_quoted_name
        s0 << r7
        if r7
          r9 = _nt_space
          if r9
            r8 = r9
          else
            r8 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r8
          if r8
            r10 = _nt_semi
            s0 << r10
            if r10
              s11, i11 = [], index
              loop do
                r12 = _nt_space
                if r12
                  s11 << r12
                else
                  break
                end
              end
              if s11.empty?
                @index = i11
                r11 = nil
              else
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
              end
              s0 << r11
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FileConfigDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:file_config_def][start_index] = r0

    r0
  end

  module HostAllowDef0
    def semi
      elements[4]
    end

  end

  def _nt_host_allow_def
    start_index = index
    if node_cache[:host_allow_def].has_key?(index)
      cached = node_cache[:host_allow_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("transfer-source", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 15))
      @index += 15
    else
      terminal_parse_failure("transfer-source")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        i4 = index
        r5 = _nt_raw_ipv4
        if r5
          r4 = r5
        else
          if has_terminal?('*', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('*')
            r6 = nil
          end
          if r6
            r4 = r6
          else
            @index = i4
            r4 = nil
          end
        end
        s0 << r4
        if r4
          r8 = _nt_strict_port_def
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            r9 = _nt_semi
            s0 << r9
            if r9
              s10, i10 = [], index
              loop do
                r11 = _nt_space
                if r11
                  s10 << r11
                else
                  break
                end
              end
              if s10.empty?
                @index = i10
                r10 = nil
              else
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              end
              s0 << r10
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(HostAllowDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:host_allow_def][start_index] = r0

    r0
  end

  module StrictPortDef0
  end

  def _nt_strict_port_def
    start_index = index
    if node_cache[:strict_port_def].has_key?(index)
      cached = node_cache[:strict_port_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?('port', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('port')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          s6, i6 = [], index
          loop do
            r7 = _nt_number
            if r7
              s6 << r7
            else
              break
            end
          end
          if s6.empty?
            @index = i6
            r6 = nil
          else
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StrictPortDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:strict_port_def][start_index] = r0

    r0
  end

  module LoosePortDef0
  end

  def _nt_loose_port_def
    start_index = index
    if node_cache[:loose_port_def].has_key?(index)
      cached = node_cache[:loose_port_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?('port', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('port')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          i6 = index
          s7, i7 = [], index
          loop do
            r8 = _nt_number
            if r8
              s7 << r8
            else
              break
            end
          end
          if s7.empty?
            @index = i7
            r7 = nil
          else
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          end
          if r7
            r6 = r7
          else
            if has_terminal?('*', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('*')
              r9 = nil
            end
            if r9
              r6 = r9
            else
              @index = i6
              r6 = nil
            end
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LoosePortDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:loose_port_def][start_index] = r0

    r0
  end

  module NetAllowDef0
    def open_curly
      elements[2]
    end

    def host_list_def
      elements[4]
    end

    def close_curly
      elements[5]
    end

    def semi
      elements[7]
    end

  end

  def _nt_net_allow_def
    start_index = index
    if node_cache[:net_allow_def].has_key?(index)
      cached = node_cache[:net_allow_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("allow-query-cache", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 17))
      @index += 17
    else
      terminal_parse_failure("allow-query-cache")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?("allow-query", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 11))
        @index += 11
      else
        terminal_parse_failure("allow-query")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        if has_terminal?("allow-recursion", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 15))
          @index += 15
        else
          terminal_parse_failure("allow-recursion")
          r4 = nil
        end
        if r4
          r1 = r4
        else
          @index = i1
          r1 = nil
        end
      end
    end
    s0 << r1
    if r1
      s5, i5 = [], index
      loop do
        r6 = _nt_space
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s0 << r5
      if r5
        r7 = _nt_open_curly
        s0 << r7
        if r7
          s8, i8 = [], index
          loop do
            r9 = _nt_space
            if r9
              s8 << r9
            else
              break
            end
          end
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          s0 << r8
          if r8
            r10 = _nt_host_list_def
            s0 << r10
            if r10
              r11 = _nt_close_curly
              s0 << r11
              if r11
                r13 = _nt_space
                if r13
                  r12 = r13
                else
                  r12 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r12
                if r12
                  r14 = _nt_semi
                  s0 << r14
                  if r14
                    s15, i15 = [], index
                    loop do
                      r16 = _nt_space
                      if r16
                        s15 << r16
                      else
                        break
                      end
                    end
                    if s15.empty?
                      @index = i15
                      r15 = nil
                    else
                      r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                    end
                    s0 << r15
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NetAllowDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:net_allow_def][start_index] = r0

    r0
  end

  module HostListDef0
    def semi
      elements[2]
    end

  end

  module HostListDef1
    def raw_ipv4
      elements[0]
    end

    def semi
      elements[2]
    end

  end

  def _nt_host_list_def
    start_index = index
    if node_cache[:host_list_def].has_key?(index)
      cached = node_cache[:host_list_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('any', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('any')
      r2 = nil
    end
    s1 << r2
    if r2
      r4 = _nt_space
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_semi
        s1 << r5
        if r5
          s6, i6 = [], index
          loop do
            r7 = _nt_space
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s1 << r6
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(HostListDef0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      s8, i8 = [], index
      loop do
        i9, s9 = index, []
        r10 = _nt_raw_ipv4
        s9 << r10
        if r10
          r12 = _nt_space
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s9 << r11
          if r11
            r13 = _nt_semi
            s9 << r13
            if r13
              s14, i14 = [], index
              loop do
                r15 = _nt_space
                if r15
                  s14 << r15
                else
                  break
                end
              end
              r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
              s9 << r14
            end
          end
        end
        if s9.last
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          r9.extend(HostListDef1)
        else
          @index = i9
          r9 = nil
        end
        if r9
          s8 << r9
        else
          break
        end
      end
      r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
      if r8
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:host_list_def][start_index] = r0

    r0
  end

  module QuerySourceDef0
    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

    def space3
      elements[5]
    end

    def space4
      elements[7]
    end

    def semi
      elements[10]
    end

  end

  def _nt_query_source_def
    start_index = index
    if node_cache[:query_source_def].has_key?(index)
      cached = node_cache[:query_source_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('query-source', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 12))
      @index += 12
    else
      terminal_parse_failure('query-source')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if has_terminal?('address', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 7))
          @index += 7
        else
          terminal_parse_failure('address')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            if has_terminal?('*', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('*')
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_space
              s0 << r6
              if r6
                if has_terminal?('port', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 4))
                  @index += 4
                else
                  terminal_parse_failure('port')
                  r7 = nil
                end
                s0 << r7
                if r7
                  r8 = _nt_space
                  s0 << r8
                  if r8
                    s9, i9 = [], index
                    loop do
                      r10 = _nt_number
                      if r10
                        s9 << r10
                      else
                        break
                      end
                    end
                    if s9.empty?
                      @index = i9
                      r9 = nil
                    else
                      r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                    end
                    s0 << r9
                    if r9
                      r12 = _nt_space
                      if r12
                        r11 = r12
                      else
                        r11 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s0 << r11
                      if r11
                        r13 = _nt_semi
                        s0 << r13
                        if r13
                          s14, i14 = [], index
                          loop do
                            r15 = _nt_space
                            if r15
                              s14 << r15
                            else
                              break
                            end
                          end
                          if s14.empty?
                            @index = i14
                            r14 = nil
                          else
                            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                          end
                          s0 << r14
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(QuerySourceDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:query_source_def][start_index] = r0

    r0
  end

  module BooleanDef0
    def space
      elements[1]
    end

    def semi
      elements[3]
    end

  end

  def _nt_boolean_def
    start_index = index
    if node_cache[:boolean_def].has_key?(index)
      cached = node_cache[:boolean_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('notify', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('notify')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('print-time', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 10))
        @index += 10
      else
        terminal_parse_failure('print-time')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_space
      s0 << r4
      if r4
        i5 = index
        if has_terminal?('yes', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('yes')
          r6 = nil
        end
        if r6
          r5 = r6
        else
          if has_terminal?('no', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('no')
            r7 = nil
          end
          if r7
            r5 = r7
          else
            @index = i5
            r5 = nil
          end
        end
        s0 << r5
        if r5
          r8 = _nt_semi
          s0 << r8
          if r8
            s9, i9 = [], index
            loop do
              r10 = _nt_space
              if r10
                s9 << r10
              else
                break
              end
            end
            if s9.empty?
              @index = i9
              r9 = nil
            else
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            end
            s0 << r9
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BooleanDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boolean_def][start_index] = r0

    r0
  end

  module LoggingConfig0
    def open_curly
      elements[3]
    end

    def logging_options
      elements[5]
    end

    def close_curly
      elements[6]
    end

    def semi
      elements[7]
    end

  end

  def _nt_logging_config
    start_index = index
    if node_cache[:logging_config].has_key?(index)
      cached = node_cache[:logging_config][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_space
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if has_terminal?("logging", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 7))
        @index += 7
      else
        terminal_parse_failure("logging")
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          r5 = _nt_space
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          r6 = _nt_open_curly
          s0 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_space
              if r8
                s7 << r8
              else
                break
              end
            end
            if s7.empty?
              @index = i7
              r7 = nil
            else
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            end
            s0 << r7
            if r7
              r9 = _nt_logging_options
              s0 << r9
              if r9
                r10 = _nt_close_curly
                s0 << r10
                if r10
                  r11 = _nt_semi
                  s0 << r11
                  if r11
                    s12, i12 = [], index
                    loop do
                      r13 = _nt_space
                      if r13
                        s12 << r13
                      else
                        break
                      end
                    end
                    r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                    s0 << r12
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LoggingConfig0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:logging_config][start_index] = r0

    r0
  end

  module LoggingOptions0
    def channel_def
      elements[0]
    end

  end

  def _nt_logging_options
    start_index = index
    if node_cache[:logging_options].has_key?(index)
      cached = node_cache[:logging_options][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_channel_def
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_category_def
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LoggingOptions0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:logging_options][start_index] = r0

    r0
  end

  module ChannelDef0
    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

    def open_curly
      elements[4]
    end

    def log_file_def
      elements[6]
    end

    def print_time
      elements[7]
    end

    def close_curly
      elements[8]
    end

    def semi
      elements[9]
    end

  end

  def _nt_channel_def
    start_index = index
    if node_cache[:channel_def].has_key?(index)
      cached = node_cache[:channel_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('channel', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('channel')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        if has_terminal?('query_logging', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 13))
          @index += 13
        else
          terminal_parse_failure('query_logging')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            r5 = _nt_open_curly
            s0 << r5
            if r5
              s6, i6 = [], index
              loop do
                r7 = _nt_space
                if r7
                  s6 << r7
                else
                  break
                end
              end
              if s6.empty?
                @index = i6
                r6 = nil
              else
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              end
              s0 << r6
              if r6
                r8 = _nt_log_file_def
                s0 << r8
                if r8
                  r9 = _nt_boolean_def
                  s0 << r9
                  if r9
                    r10 = _nt_close_curly
                    s0 << r10
                    if r10
                      r11 = _nt_semi
                      s0 << r11
                      if r11
                        s12, i12 = [], index
                        loop do
                          r13 = _nt_space
                          if r13
                            s12 << r13
                          else
                            break
                          end
                        end
                        if s12.empty?
                          @index = i12
                          r12 = nil
                        else
                          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                        end
                        s0 << r12
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ChannelDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:channel_def][start_index] = r0

    r0
  end

  module LogFileDef0
    def quoted_name
      elements[2]
    end

    def space1
      elements[5]
    end

    def number
      elements[6]
    end

    def space2
      elements[7]
    end

    def space3
      elements[9]
    end

    def semi
      elements[12]
    end

  end

  def _nt_log_file_def
    start_index = index
    if node_cache[:log_file_def].has_key?(index)
      cached = node_cache[:log_file_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("file", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure("file")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_space
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_quoted_name
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_space
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s0 << r5
          if r5
            if has_terminal?('versions', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 8))
              @index += 8
            else
              terminal_parse_failure('versions')
              r7 = nil
            end
            s0 << r7
            if r7
              r8 = _nt_space
              s0 << r8
              if r8
                r9 = _nt_number
                s0 << r9
                if r9
                  r10 = _nt_space
                  s0 << r10
                  if r10
                    if has_terminal?('size', false, index)
                      r11 = instantiate_node(SyntaxNode,input, index...(index + 4))
                      @index += 4
                    else
                      terminal_parse_failure('size')
                      r11 = nil
                    end
                    s0 << r11
                    if r11
                      r12 = _nt_space
                      s0 << r12
                      if r12
                        s13, i13 = [], index
                        loop do
                          r14 = _nt_number
                          if r14
                            s13 << r14
                          else
                            break
                          end
                        end
                        if s13.empty?
                          @index = i13
                          r13 = nil
                        else
                          r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                        end
                        s0 << r13
                        if r13
                          i16 = index
                          if has_terminal?('M', false, index)
                            r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure('M')
                            r17 = nil
                          end
                          if r17
                            r16 = r17
                          else
                            if has_terminal?('G', false, index)
                              r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('G')
                              r18 = nil
                            end
                            if r18
                              r16 = r18
                            else
                              if has_terminal?('K', false, index)
                                r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure('K')
                                r19 = nil
                              end
                              if r19
                                r16 = r19
                              else
                                @index = i16
                                r16 = nil
                              end
                            end
                          end
                          if r16
                            r15 = r16
                          else
                            r15 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s0 << r15
                          if r15
                            r20 = _nt_semi
                            s0 << r20
                            if r20
                              s21, i21 = [], index
                              loop do
                                r22 = _nt_space
                                if r22
                                  s21 << r22
                                else
                                  break
                                end
                              end
                              if s21.empty?
                                @index = i21
                                r21 = nil
                              else
                                r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                              end
                              s0 << r21
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LogFileDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:log_file_def][start_index] = r0

    r0
  end

  module CategoryDef0
    def space1
      elements[1]
    end

    def space2
      elements[3]
    end

    def open_curly
      elements[4]
    end

    def semi1
      elements[7]
    end

    def close_curly
      elements[9]
    end

    def semi2
      elements[10]
    end

  end

  def _nt_category_def
    start_index = index
    if node_cache[:category_def].has_key?(index)
      cached = node_cache[:category_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('category', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('category')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        i3 = index
        if has_terminal?('queries', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 7))
          @index += 7
        else
          terminal_parse_failure('queries')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?('lame-servers', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 12))
            @index += 12
          else
            terminal_parse_failure('lame-servers')
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        s0 << r3
        if r3
          r6 = _nt_space
          s0 << r6
          if r6
            r7 = _nt_open_curly
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_space
                if r9
                  s8 << r9
                else
                  break
                end
              end
              if s8.empty?
                @index = i8
                r8 = nil
              else
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              end
              s0 << r8
              if r8
                i10 = index
                if has_terminal?('query_logging', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 13))
                  @index += 13
                else
                  terminal_parse_failure('query_logging')
                  r11 = nil
                end
                if r11
                  r10 = r11
                else
                  if has_terminal?('null', false, index)
                    r12 = instantiate_node(SyntaxNode,input, index...(index + 4))
                    @index += 4
                  else
                    terminal_parse_failure('null')
                    r12 = nil
                  end
                  if r12
                    r10 = r12
                  else
                    @index = i10
                    r10 = nil
                  end
                end
                s0 << r10
                if r10
                  r13 = _nt_semi
                  s0 << r13
                  if r13
                    s14, i14 = [], index
                    loop do
                      r15 = _nt_space
                      if r15
                        s14 << r15
                      else
                        break
                      end
                    end
                    if s14.empty?
                      @index = i14
                      r14 = nil
                    else
                      r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                    end
                    s0 << r14
                    if r14
                      r16 = _nt_close_curly
                      s0 << r16
                      if r16
                        r17 = _nt_semi
                        s0 << r17
                        if r17
                          s18, i18 = [], index
                          loop do
                            r19 = _nt_space
                            if r19
                              s18 << r19
                            else
                              break
                            end
                          end
                          if s18.empty?
                            @index = i18
                            r18 = nil
                          else
                            r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                          end
                          s0 << r18
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CategoryDef0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:category_def][start_index] = r0

    r0
  end

  module Space0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?("\t", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\t")
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?(" ", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(" ")
        r3 = nil
      end
      if r3
        r1 = r3
      else
        if has_terminal?("\n", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r4 = nil
        end
        if r4
          r1 = r4
        else
          r5 = _nt_comments
          if r5
            r1 = r5
          else
            @index = i1
            r1 = nil
          end
        end
      end
    end
    s0 << r1
    if r1
      s6, i6 = [], index
      loop do
        r7 = _nt_space
        if r7
          s6 << r7
        else
          break
        end
      end
      r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      s0 << r6
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Space0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:space][start_index] = r0

    r0
  end

  module QuotedName0
  end

  module QuotedName1
    def quote1
      elements[0]
    end

    def name
      elements[1]
    end

    def quote2
      elements[2]
    end
  end

  def _nt_quoted_name
    start_index = index
    if node_cache[:quoted_name].has_key?(index)
      cached = node_cache[:quoted_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_quote
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        r5 = _nt_quote
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(QuotedName0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r7 = _nt_quote
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(QuotedName1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:quoted_name][start_index] = r0

    r0
  end

  def _nt_quote
    start_index = index
    if node_cache[:quote].has_key?(index)
      cached = node_cache[:quote][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("\"", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\"")
      r0 = nil
    end

    node_cache[:quote][start_index] = r0

    r0
  end

  def _nt_open_curly
    start_index = index
    if node_cache[:open_curly].has_key?(index)
      cached = node_cache[:open_curly][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("{", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("{")
      r0 = nil
    end

    node_cache[:open_curly][start_index] = r0

    r0
  end

  def _nt_semi
    start_index = index
    if node_cache[:semi].has_key?(index)
      cached = node_cache[:semi][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(";", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(";")
      r0 = nil
    end

    node_cache[:semi][start_index] = r0

    r0
  end

  def _nt_newline
    start_index = index
    if node_cache[:newline].has_key?(index)
      cached = node_cache[:newline][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("\n", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\n")
      r0 = nil
    end

    node_cache[:newline][start_index] = r0

    r0
  end

  module RawIpv40
    def octet1
      elements[0]
    end

    def dot1
      elements[1]
    end

    def octet2
      elements[2]
    end

    def dot2
      elements[3]
    end

    def octet3
      elements[4]
    end

    def dot3
      elements[5]
    end

    def octet4
      elements[6]
    end

  end

  def _nt_raw_ipv4
    start_index = index
    if node_cache[:raw_ipv4].has_key?(index)
      cached = node_cache[:raw_ipv4][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      r2 = _nt_octet
      s1 << r2
      if r2
        r3 = _nt_dot
        s1 << r3
        if r3
          r4 = _nt_octet
          s1 << r4
          if r4
            r5 = _nt_dot
            s1 << r5
            if r5
              r6 = _nt_octet
              s1 << r6
              if r6
                r7 = _nt_dot
                s1 << r7
                if r7
                  r8 = _nt_octet
                  s1 << r8
                  if r8
                    r10 = _nt_cidr
                    if r10
                      r9 = r10
                    else
                      r9 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s1 << r9
                  end
                end
              end
            end
          end
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(RawIpv40)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:raw_ipv4][start_index] = r0

    r0
  end

  def _nt_octet
    start_index = index
    if node_cache[:octet].has_key?(index)
      cached = node_cache[:octet][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_number
      if r1
        s0 << r1
      else
        break
      end
      if s0.size == 3
        break
      end
    end
    if s0.size < 1
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:octet][start_index] = r0

    r0
  end

  module Cidr0
  end

  module Cidr1
    def number
      elements[1]
    end
  end

  module Cidr2
    def number
      elements[1]
    end
  end

  module Cidr3
    def number
      elements[1]
    end
  end

  module Cidr4
  end

  def _nt_cidr
    start_index = index
    if node_cache[:cidr].has_key?(index)
      cached = node_cache[:cidr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('/', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('/')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      i3, s3 = index, []
      if has_terminal?('3', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('3')
        r4 = nil
      end
      s3 << r4
      if r4
        if has_terminal?('\G[0-2]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        s3 << r5
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Cidr0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        i6, s6 = index, []
        if has_terminal?('1', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('1')
          r7 = nil
        end
        s6 << r7
        if r7
          r8 = _nt_number
          s6 << r8
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Cidr1)
        else
          @index = i6
          r6 = nil
        end
        if r6
          r2 = r6
        else
          i9, s9 = index, []
          if has_terminal?('2', false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('2')
            r10 = nil
          end
          s9 << r10
          if r10
            r11 = _nt_number
            s9 << r11
          end
          if s9.last
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            r9.extend(Cidr2)
          else
            @index = i9
            r9 = nil
          end
          if r9
            r2 = r9
          else
            i12, s12 = index, []
            if has_terminal?('0', false, index)
              r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('0')
              r14 = nil
            end
            if r14
              r13 = r14
            else
              r13 = instantiate_node(SyntaxNode,input, index...index)
            end
            s12 << r13
            if r13
              r15 = _nt_number
              s12 << r15
            end
            if s12.last
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              r12.extend(Cidr3)
            else
              @index = i12
              r12 = nil
            end
            if r12
              r2 = r12
            else
              @index = i2
              r2 = nil
            end
          end
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Cidr4)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:cidr][start_index] = r0

    r0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[0-9]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  def _nt_dot
    start_index = index
    if node_cache[:dot].has_key?(index)
      cached = node_cache[:dot][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('.', false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('.')
      r0 = nil
    end

    node_cache[:dot][start_index] = r0

    r0
  end

  def _nt_close_curly
    start_index = index
    if node_cache[:close_curly].has_key?(index)
      cached = node_cache[:close_curly][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("}", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("}")
      r0 = nil
    end

    node_cache[:close_curly][start_index] = r0

    r0
  end

  def _nt_comments
    start_index = index
    if node_cache[:comments].has_key?(index)
      cached = node_cache[:comments][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_sh_comment
    if r1
      r0 = r1
    else
      r2 = _nt_cplus_comment
      if r2
        r0 = r2
      else
        r3 = _nt_multiline_c_comment
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:comments][start_index] = r0

    r0
  end

  module ShComment0
  end

  module ShComment1
  end

  def _nt_sh_comment
    start_index = index
    if node_cache[:sh_comment].has_key?(index)
      cached = node_cache[:sh_comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('#', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('#')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        r5 = _nt_newline
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ShComment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ShComment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sh_comment][start_index] = r0

    r0
  end

  module CplusComment0
  end

  module CplusComment1
  end

  def _nt_cplus_comment
    start_index = index
    if node_cache[:cplus_comment].has_key?(index)
      cached = node_cache[:cplus_comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('//', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('//')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        r5 = _nt_newline
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(CplusComment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CplusComment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:cplus_comment][start_index] = r0

    r0
  end

  module MultilineCComment0
  end

  module MultilineCComment1
  end

  def _nt_multiline_c_comment
    start_index = index
    if node_cache[:multiline_c_comment].has_key?(index)
      cached = node_cache[:multiline_c_comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('/*', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('/*')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?('*/', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*/')
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(MultilineCComment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('*/', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('*/')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MultilineCComment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:multiline_c_comment][start_index] = r0

    r0
  end

end

class NamedParser < Treetop::Runtime::CompiledParser
  include Named
end

